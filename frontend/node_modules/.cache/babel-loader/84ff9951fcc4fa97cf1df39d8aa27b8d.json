{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.resetState = resetState;\nexports.log = log;\nvar htmlClassList = {};\nvar docBodyClassList = {};\n/* eslint-disable no-console */\n\n/* istanbul ignore next */\n\nfunction removeClass(at, cls) {\n  at.classList.remove(cls);\n}\n/* istanbul ignore next */\n\n\nfunction resetState() {\n  var htmlElement = document.getElementsByTagName(\"html\")[0];\n\n  for (var cls in htmlClassList) {\n    removeClass(htmlElement, htmlClassList[cls]);\n  }\n\n  var body = document.body;\n\n  for (var _cls in docBodyClassList) {\n    removeClass(body, docBodyClassList[_cls]);\n  }\n\n  htmlClassList = {};\n  docBodyClassList = {};\n}\n/* istanbul ignore next */\n\n\nfunction log() {\n  if (process.env.NODE_ENV !== \"production\") {\n    var classes = document.getElementsByTagName(\"html\")[0].className;\n    var buffer = \"Show tracked classes:\\n\\n\";\n    buffer += \"<html /> (\" + classes + \"):\\n  \";\n\n    for (var x in htmlClassList) {\n      buffer += \"  \" + x + \" \" + htmlClassList[x] + \"\\n  \";\n    }\n\n    classes = document.body.className;\n    buffer += \"\\n\\ndoc.body (\" + classes + \"):\\n  \";\n\n    for (var _x in docBodyClassList) {\n      buffer += \"  \" + _x + \" \" + docBodyClassList[_x] + \"\\n  \";\n    }\n\n    buffer += \"\\n\";\n    console.log(buffer);\n  }\n}\n/* eslint-enable no-console */\n\n/**\n * Track the number of reference of a class.\n * @param {object} poll The poll to receive the reference.\n * @param {string} className The class name.\n * @return {string}\n */\n\n\nvar incrementReference = function incrementReference(poll, className) {\n  if (!poll[className]) {\n    poll[className] = 0;\n  }\n\n  poll[className] += 1;\n  return className;\n};\n/**\n * Drop the reference of a class.\n * @param {object} poll The poll to receive the reference.\n * @param {string} className The class name.\n * @return {string}\n */\n\n\nvar decrementReference = function decrementReference(poll, className) {\n  if (poll[className]) {\n    poll[className] -= 1;\n  }\n\n  return className;\n};\n/**\n * Track a class and add to the given class list.\n * @param {Object} classListRef A class list of an element.\n * @param {Object} poll         The poll to be used.\n * @param {Array}  classes      The list of classes to be tracked.\n */\n\n\nvar trackClass = function trackClass(classListRef, poll, classes) {\n  classes.forEach(function (className) {\n    incrementReference(poll, className);\n    classListRef.add(className);\n  });\n};\n/**\n * Untrack a class and remove from the given class list if the reference\n * reaches 0.\n * @param {Object} classListRef A class list of an element.\n * @param {Object} poll         The poll to be used.\n * @param {Array}  classes      The list of classes to be untracked.\n */\n\n\nvar untrackClass = function untrackClass(classListRef, poll, classes) {\n  classes.forEach(function (className) {\n    decrementReference(poll, className);\n    poll[className] === 0 && classListRef.remove(className);\n  });\n};\n/**\n * Public inferface to add classes to the document.body.\n * @param {string} bodyClass The class string to be added.\n *                           It may contain more then one class\n *                           with ' ' as separator.\n */\n\n\nvar add = exports.add = function add(element, classString) {\n  return trackClass(element.classList, element.nodeName.toLowerCase() == \"html\" ? htmlClassList : docBodyClassList, classString.split(\" \"));\n};\n/**\n * Public inferface to remove classes from the document.body.\n * @param {string} bodyClass The class string to be added.\n *                           It may contain more then one class\n *                           with ' ' as separator.\n */\n\n\nvar remove = exports.remove = function remove(element, classString) {\n  return untrackClass(element.classList, element.nodeName.toLowerCase() == \"html\" ? htmlClassList : docBodyClassList, classString.split(\" \"));\n};","map":{"version":3,"names":["Object","defineProperty","exports","value","resetState","log","htmlClassList","docBodyClassList","removeClass","at","cls","classList","remove","htmlElement","document","getElementsByTagName","body","_cls","process","env","NODE_ENV","classes","className","buffer","x","_x","console","incrementReference","poll","decrementReference","trackClass","classListRef","forEach","add","untrackClass","element","classString","nodeName","toLowerCase","split"],"sources":["/home/fabo/programas/next_react/PI-Plataform/frontend/node_modules/.pnpm/react-modal@3.15.1_ef5jwxihqo6n7gxfmzogljlgcm/node_modules/react-modal/lib/helpers/classList.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.resetState = resetState;\nexports.log = log;\nvar htmlClassList = {};\nvar docBodyClassList = {};\n\n/* eslint-disable no-console */\n/* istanbul ignore next */\nfunction removeClass(at, cls) {\n  at.classList.remove(cls);\n}\n\n/* istanbul ignore next */\nfunction resetState() {\n  var htmlElement = document.getElementsByTagName(\"html\")[0];\n  for (var cls in htmlClassList) {\n    removeClass(htmlElement, htmlClassList[cls]);\n  }\n\n  var body = document.body;\n  for (var _cls in docBodyClassList) {\n    removeClass(body, docBodyClassList[_cls]);\n  }\n\n  htmlClassList = {};\n  docBodyClassList = {};\n}\n\n/* istanbul ignore next */\nfunction log() {\n  if (process.env.NODE_ENV !== \"production\") {\n    var classes = document.getElementsByTagName(\"html\")[0].className;\n    var buffer = \"Show tracked classes:\\n\\n\";\n\n    buffer += \"<html /> (\" + classes + \"):\\n  \";\n    for (var x in htmlClassList) {\n      buffer += \"  \" + x + \" \" + htmlClassList[x] + \"\\n  \";\n    }\n\n    classes = document.body.className;\n\n    buffer += \"\\n\\ndoc.body (\" + classes + \"):\\n  \";\n    for (var _x in docBodyClassList) {\n      buffer += \"  \" + _x + \" \" + docBodyClassList[_x] + \"\\n  \";\n    }\n\n    buffer += \"\\n\";\n\n    console.log(buffer);\n  }\n}\n/* eslint-enable no-console */\n\n/**\n * Track the number of reference of a class.\n * @param {object} poll The poll to receive the reference.\n * @param {string} className The class name.\n * @return {string}\n */\nvar incrementReference = function incrementReference(poll, className) {\n  if (!poll[className]) {\n    poll[className] = 0;\n  }\n  poll[className] += 1;\n  return className;\n};\n\n/**\n * Drop the reference of a class.\n * @param {object} poll The poll to receive the reference.\n * @param {string} className The class name.\n * @return {string}\n */\nvar decrementReference = function decrementReference(poll, className) {\n  if (poll[className]) {\n    poll[className] -= 1;\n  }\n  return className;\n};\n\n/**\n * Track a class and add to the given class list.\n * @param {Object} classListRef A class list of an element.\n * @param {Object} poll         The poll to be used.\n * @param {Array}  classes      The list of classes to be tracked.\n */\nvar trackClass = function trackClass(classListRef, poll, classes) {\n  classes.forEach(function (className) {\n    incrementReference(poll, className);\n    classListRef.add(className);\n  });\n};\n\n/**\n * Untrack a class and remove from the given class list if the reference\n * reaches 0.\n * @param {Object} classListRef A class list of an element.\n * @param {Object} poll         The poll to be used.\n * @param {Array}  classes      The list of classes to be untracked.\n */\nvar untrackClass = function untrackClass(classListRef, poll, classes) {\n  classes.forEach(function (className) {\n    decrementReference(poll, className);\n    poll[className] === 0 && classListRef.remove(className);\n  });\n};\n\n/**\n * Public inferface to add classes to the document.body.\n * @param {string} bodyClass The class string to be added.\n *                           It may contain more then one class\n *                           with ' ' as separator.\n */\nvar add = exports.add = function add(element, classString) {\n  return trackClass(element.classList, element.nodeName.toLowerCase() == \"html\" ? htmlClassList : docBodyClassList, classString.split(\" \"));\n};\n\n/**\n * Public inferface to remove classes from the document.body.\n * @param {string} bodyClass The class string to be added.\n *                           It may contain more then one class\n *                           with ' ' as separator.\n */\nvar remove = exports.remove = function remove(element, classString) {\n  return untrackClass(element.classList, element.nodeName.toLowerCase() == \"html\" ? htmlClassList : docBodyClassList, classString.split(\" \"));\n};"],"mappings":"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"},"metadata":{},"sourceType":"script"}